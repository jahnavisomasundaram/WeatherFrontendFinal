@page "/"
@using MudBlazor
@using WeatherFrontend.Models
@inject UserData Data
@inject NavigationManager Navigation
@inject HttpClient http
@inject IJSRuntime JS
@using System.Text.Json;


@* <MudContainer Style="background: linear-gradient(135deg, #4DD0E1 0%,#80DEEA 51%,#B2EBF2 100%); min-height:100vh; width:200vw ;display:flex; align-items:center;">
   
</MudContainer> *@



<MudPaper Class="pa-8 mx-auto" Elevation="24" Style="border-radius:16px; max-width:450px; background: rgba(255,255,255,0.95);">
    <div class="text-center mb-6">
        <MudIcon Icon="@Icons.Material.Filled.WbSunny" Size="Size.Large" style="color:#689F38" Class="mb-2" />
        <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-1" Style="color:#689F38; font-weight:600;">Weather Forecast</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center" Style="color:#5a7ba7;">Sign in to your account</MudText>
    </div>

    <MudGrid Spacing="3">
        <MudItem xs="12">
            <MudTextField @bind-Value="email"
                          Label="Email"
                          Variant="Variant.Outlined"
                          Required="true"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          AdornmentColor="Color.Primary"
                          FullWidth="true"
                          Class="mb-4" />
        </MudItem>

        <MudItem xs="12">
            <MudTextField @bind-Value="password"
                          Label="Password"
                          Variant="Variant.Outlined"
                          InputType="InputType.Password"
                          Required="true"
                          AdornmentIcon="@Icons.Material.Filled.Lock"
                          AdornmentColor="Color.Primary"
                          FullWidth="true"
                          Class="mb-2" />
        </MudItem>

        <MudItem xs="12" Class="d-flex justify-center mt-2">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       EndIcon="@Icons.Material.Filled.ArrowForward"
                       Size="Size.Large"
                       Style="min-width:200px; background: linear-gradient(45deg, #558B2F, #7CB342);"
                       Class="py-4 px-6"
                       @onclick="LoginUser">
                Sign In
            </MudButton>
        </MudItem>

        <MudItem xs="12" Class="d-flex justify-center mt-2">
            <MudButton OnClick="LoginWithGoogle" Variant="Variant.Outlined" >
                <img src="Images/google.png" alt="Weather Icon" width="30" height="30" style="margin-right:12px" />
                Sign in with Google
            </MudButton>
        </MudItem>

        <MudItem xs="12" Class="d-flex justify-center align-center mt-4">
            <MudText Class="me-1" Style="color:#5a7ba7;">Don't have an account?</MudText>
            <MudLink href="/register"
                     Style="font-weight:600; color:#558B2F!important;">
                Register now
            </MudLink>
        </MudItem>

        

        @if (!string.IsNullOrWhiteSpace(message))
        {
            <MudItem xs="12" Class="d-flex justify-center mt-4">
                <MudAlert Elevation="5"
                          Severity="@(message.Contains("successful") ? Severity.Success : Severity.Error)"
                          Class="mt-2"
                          Style="width:100%">
                    @message
                </MudAlert>
            </MudItem>
        }
    </MudGrid>

</MudPaper>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    string message = "";


    //private async Task LoginUser()
    //{
    //     try
    //     {
    //         var result = await SupabaseService.SupabaseClient.Auth.SignIn(email, password);
    //         if (result != null)
    //         {
    //             message = "Login successful!";
    //             Data.Email = email;
    //             Console.WriteLine(Data.Email);
    //             Navigation.NavigateTo("/weather");
    //         }
    //         else
    //         {
    //             message = "Login failed!";
    //         }
    //     }
    //     catch (Supabase.Gotrue.Exceptions.GotrueException ex)
    //     {
    //         if (ex.Message.Contains("Invalid login credentials"))
    //             message = "Incorrect email or password!";
    //         else
    //             message = $"Login error: {ex.Message}";
    //     }
    //     catch (Exception ex)
    //     {
    //         message = $"Unexpected error: {ex.Message}";
    //     }
    //}

    private async Task LoginWithGoogle()
    {
        var redirectUrl = Navigation.BaseUri + "auth-callback";
        var authUrl = "https://mhafwaswlwevrxcvfmah.supabase.co/auth/v1/authorize?provider=google&redirect_to=" + Uri.EscapeDataString(redirectUrl);

        Navigation.NavigateTo(authUrl.ToString(), forceLoad: true);
    }


    private async Task LoginUser()
    {
        var payload = new
        {
            email = email,
            password = password
        };

        try
        {
            var response = await http.PostAsJsonAsync("https://localhost:7155/api/auth/supabase-login", payload);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                var jwt = json.GetProperty("token").GetString();

                // Store the JWT in localStorage
                await JS.InvokeVoidAsync("localStorage.setItem", "jwt", jwt);

                message = "✅ Login successful!";
                //Data.Email = email;
                Navigation.NavigateTo("/weather");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"❌ Login failed: {error}";
            }
        }
        catch (Exception ex)
        {
            message = $"🚨 Unexpected error: {ex.Message}";
        }
    }
}
}
